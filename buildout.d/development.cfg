[buildout]
extends =
    buildout.d/base.cfg
    buildout.d/build.cfg
parts +=
    ff-input ff-webm ff-x264 motion stream-m nginx supervisor

# Generate ffmpeg input config
[ff-input]
recipe = brodul.recipe.template
input = templates/ff_input.conf.jinja2
output = config/ff_input.conf

device = /dev/v4l/by-id/usb-046d_081b_7983B8D0-video-index0
width = 720
height = 480
use_mjpeg = True
offset = 00:00:01

# Generate ffmpeg webm config
[ff-webm]
recipe = brodul.recipe.template
input = templates/ff_webm.conf.jinja2
output = config/ff_webm.conf

# Generate ffmpeg x264 config
[ff-x264]
recipe = brodul.recipe.template
input = templates/ff_x264.conf.jinja2
output = config/ff_x264.conf

# Generate motion config
[motion]
recipe = brodul.recipe.template
input = templates/motion.conf.jinja2
output = config/motion.conf

device = /dev/v4l/by-path/pci-0000:03:01.0-video-index0
device_input = 1
width = 720
height = 576
upload_url = ${http:url}/slide
path = ${buildout:directory}/slides

# Generate stream-m webm server config
[stream-m]
recipe = brodul.recipe.template
input = templates/stream-m.conf.jinja2
output = config/stream-m.conf

port = 65200
url = http://recode:${:port}
streams = testing production

# Generate nginx rtmp/hls server config
[nginx]
recipe = brodul.recipe.template
input = templates/nginx.conf.jinja2
output = config/nginx.conf

port = 8081
rtmp_port = 65400
url = http://recode:${:port}/hls
stream_url = rtmp://localhost:${:rtmp_port}/hls
storage = ${buildout:directory}/var/

# Setup stream options
[testing]
password = testing

[production]
password = production

# Http server options
[http]
port = 65100
url = http://localhost:${:port}

# Starts streaming server, video stream for production and one for testing.
# Start motion for motion detection and test http server
#
# Also add eventlisteners for starting and stopping testing and production stream
[supervisor]
recipe = collective.recipe.supervisor
plugins =
    superlance
http-socket = unix
file = ${buildout:directory}/var/supervisor.sock
programs =
    20 stream-m (autostart=true startsecs=2) java [-cp lib/stream-m.jar StreamingServer ${buildout:directory}/config/stream-m.conf] ${stream-m-download:location}/dist
    20 nginx (autostart=true startsecs=2) ${buildout:bin-directory}/nginx [-c ${buildout:directory}/config/nginx.conf -p ${buildout:directory}] ${buildout:directory}
    10 ffmpeg-production (autostart=false startsecs=2) bash [-c "${buildout:bin-directory}/ffmpeg $(< ${buildout:directory}/config/ff_input.conf) $(< ${buildout:directory}/config/ff_webm.conf) ${stream-m:url}/publish/production?password=${production:password} $(< ${buildout:directory}/config/ff_x264.conf) ${nginx:stream_url}/production"] ${buildout:directory}
    10 ffmpeg-testing (autostart=false startsecs=2) bash [-c "${buildout:bin-directory}/ffmpeg $(< ${buildout:directory}/config/ff_input.conf) $(< ${buildout:directory}/config/ff_webm.conf) ${stream-m:url}/publish/testing?password=${testing:password} $(< ${buildout:directory}/config/ff_x264.conf) ${nginx:stream_url}/testing"] ${buildout:directory}
    0  motion (autostart=false startsecs=2 startretries=3) ${buildout:bin-directory}/motion [-c ${buildout:directory}/config/motion.conf] ${buildout:directory}
    0  http  (autostart=true startsecs=2) python [${buildout:directory}/test_server.py --port ${http:port} --stream-url ${stream-m:url}/consume/production --test-url ${stream-m:url}/consume/testing] ${buildout:directory}
groups =
    20 production ffmpeg-production,motion
    20 testing ffmpeg-testing,motion
eventlisteners =
    httpctrl-production TICK_5 ${buildout:bin-directory}/httpctrl [-p production -b "True" ${http:url}/started ]
    httpctrl-testing TICK_5 ${buildout:bin-directory}/httpctrl [-p testing -b "True" ${http:url}/started_test ]
